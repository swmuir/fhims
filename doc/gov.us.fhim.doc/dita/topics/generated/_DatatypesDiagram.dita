<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="Datatypes" xml:lang="en-us">
<title id="title">Datatypes</title>
<shortdesc id="shortdesc">Class Diagram</shortdesc>
<body id="body" >
<p>This diagram displays all the classes in the FHIM Datatypes package.  The FHIM data types are based on the HL7 Version 3 data types, but are simplified so that they might be more easily resolved into implementable specifications.  Where a FHIM data type maps to an HL7 data type, we have placed the HL7 data type mnemonic as a keyword, so for example, Person Name has a &lt;&lt;PN&gt;&gt; keyword.</p><p></p><p>It is important to keep in mind that many of these data types will not necessarily be implemented directly, but rather serve as logical placeholders that will be used to inform a transformation process to generate structures appropriate to the target platform.  For example, note the Id data type.  When targeting an HL7 V2 platform, FHIM properties referencing the Id data type will be modified to reference an HL72EntityIdentifier, HL72ExtendedCompositeId, HL72HierarchicDesignator, HL72OrganizationIdentifierExtended, or HL72PersonLocation, as needed.  The knowledge of which HL7 V2 &#8220;flavor&#8221; of Id to substitute will be contained in a separate mapping model.  Similarly, when targeting HL7 V3, multiple &#8220;flavors&#8221; of V3 Id data types are possible.</p><p></p><p>A note about Person Name is in order:  We found the HL7 V3 notion that a person&#8217;s given name is an ordered list of names rather than a first name and middle name as traditionally modeled to be a useful construct.  But we found that HL7&#8217;s modeling each part of the name separately to be overly complex, so we have modeled a single structure made up of several attributes each of which is a string.  Also, we chose not to build a use code into the Person Name data type, rather, the use code is defined explicitly in the domain models.  For example, the Person class contains a property called legalName, which by definition should contain the person&#8217;s legal name, thus no use code is required.</p><p></p><p>Similarly for addresses, we found HL7&#8217;s modeling each part of the address separately to be overly complex, so we have modeled a single structure made up of several attributes each of which is a string.  Notably, the street portion of the address is simply line1, line2, and line3 rather than modeling each part of the street line separately.</p><p></p><p>However, unlike our approach for Person Name, for both addresses and telecommunications addresses, we chose a hybrid approach for the use code.  We include an address type (the values of which come from the HL7 V3 vocabulary), and we explicitly model the use of the data element in the domain model.  For example, Person has both a primaryHomeAddress and a workAddress.  The Address.addressTypeCode property would be set to the appropriate value accordingly.  This approach was taken in order to explicitly account for the concepts in the logical model (for example, it makes no sense for a hospital to have a home phone number), while acknowledging that phone numbers, addresses, email addresses, etc. will likely be implemented using a mixed bag of addresses, each of which would have some sort of type code.</p>
<p><image href="../../diagrams/Class/Datatypes.jpg" height="10in" width="7in" /></p>
</body>
</topic>
